/* 690502693516ab2417d31b08f7d504131f4ca7c3
 * This file is automatically generated by graphql-let. */

import * as Types from "../../../../node_modules/@types/graphql-let/__generated__/__types__";

import { GraphQLResolveInfo } from "graphql";
import { gql } from "@apollo/client";
export type RequireFields<T, K extends keyof T> = {
  [X in Exclude<keyof T, K>]?: T[X];
} &
  { [P in K]-?: NonNullable<T[P]> };
export type ListCommonFragment = { __typename?: "UserList" } & Pick<
  Types.UserList,
  "id" | "slug" | "name" | "description" | "mode"
>;

export const ListCommonFragmentDoc = gql`
  fragment ListCommon on UserList {
    id
    slug
    name
    description
    mode
  }
`;

export type ResolverTypeWrapper<T> = Promise<T> | T;

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> =
  | LegacyStitchingResolver<TResult, TParent, TContext, TArgs>
  | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<
  TResult,
  TKey extends string,
  TParent,
  TContext,
  TArgs
> {
  subscribe: SubscriptionSubscribeFn<
    { [key in TKey]: TResult },
    TParent,
    TContext,
    TArgs
  >;
  resolve?: SubscriptionResolveFn<
    TResult,
    { [key in TKey]: TResult },
    TContext,
    TArgs
  >;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<
  TResult,
  TKey extends string,
  TParent,
  TContext,
  TArgs
> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<
  TResult,
  TKey extends string,
  TParent = {},
  TContext = {},
  TArgs = {}
> =
  | ((
      ...args: any[]
    ) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Types.Maybe<TTypes> | Promise<Types.Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (
  obj: T,
  context: TContext,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<
  TResult = {},
  TParent = {},
  TContext = {},
  TArgs = {}
> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Query: ResolverTypeWrapper<{}>;
  String: ResolverTypeWrapper<Types.Scalars["String"]>;
  ID: ResolverTypeWrapper<Types.Scalars["ID"]>;
  Mutation: ResolverTypeWrapper<{}>;
  FriendsToListInput: Types.FriendsToListInput;
  Boolean: ResolverTypeWrapper<Types.Scalars["Boolean"]>;
  ListMode: Types.ListMode;
  CreateListInput: Types.CreateListInput;
  UpdateListInput: Types.UpdateListInput;
  ListOwnership: Types.ListOwnership;
  Pagination: Types.Pagination;
  Int: ResolverTypeWrapper<Types.Scalars["Int"]>;
  Node: ResolversTypes["User"] | ResolversTypes["UserList"];
  Edge: never;
  User: ResolverTypeWrapper<Types.User>;
  UserList: ResolverTypeWrapper<Types.UserList>;
  UsersConnection: ResolverTypeWrapper<Types.UsersConnection>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Query: {};
  String: Types.Scalars["String"];
  ID: Types.Scalars["ID"];
  Mutation: {};
  FriendsToListInput: Types.FriendsToListInput;
  Boolean: Types.Scalars["Boolean"];
  CreateListInput: Types.CreateListInput;
  UpdateListInput: Types.UpdateListInput;
  Pagination: Types.Pagination;
  Int: Types.Scalars["Int"];
  Node: ResolversParentTypes["User"] | ResolversParentTypes["UserList"];
  Edge: never;
  User: Types.User;
  UserList: Types.UserList;
  UsersConnection: Types.UsersConnection;
};

export type QueryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Query"] = ResolversParentTypes["Query"]
> = {
  hello?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  friends?: Resolver<
    ResolversTypes["UsersConnection"],
    ParentType,
    ContextType,
    RequireFields<Types.QueryFriendsArgs, never>
  >;
  lists?: Resolver<
    Array<ResolversTypes["UserList"]>,
    ParentType,
    ContextType,
    RequireFields<Types.QueryListsArgs, never>
  >;
  list?: Resolver<
    ResolversTypes["UserList"],
    ParentType,
    ContextType,
    RequireFields<Types.QueryListArgs, "id" | "slug">
  >;
};

export type MutationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Mutation"] = ResolversParentTypes["Mutation"]
> = {
  createList?: Resolver<
    ResolversTypes["UserList"],
    ParentType,
    ContextType,
    RequireFields<Types.MutationCreateListArgs, "input">
  >;
  updateList?: Resolver<
    ResolversTypes["UserList"],
    ParentType,
    ContextType,
    RequireFields<Types.MutationUpdateListArgs, "input">
  >;
  addFriendsToList?: Resolver<
    ResolversTypes["UserList"],
    ParentType,
    ContextType,
    RequireFields<Types.MutationAddFriendsToListArgs, "input">
  >;
  unfollow?: Resolver<
    Array<ResolversTypes["User"]>,
    ParentType,
    ContextType,
    RequireFields<Types.MutationUnfollowArgs, "ids">
  >;
};

export type NodeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Node"] = ResolversParentTypes["Node"]
> = {
  __resolveType: TypeResolveFn<"User" | "UserList", ParentType, ContextType>;
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
};

export type EdgeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Edge"] = ResolversParentTypes["Edge"]
> = {
  __resolveType: TypeResolveFn<null, ParentType, ContextType>;
  node?: Resolver<ResolversTypes["Node"], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
};

export type UserResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["User"] = ResolversParentTypes["User"]
> = {
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  imageSrc?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  screenName?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["UserList"] = ResolversParentTypes["UserList"]
> = {
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  uri?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  description?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  fullName?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  user?: Resolver<ResolversTypes["User"], ParentType, ContextType>;
  mode?: Resolver<ResolversTypes["ListMode"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UsersConnectionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["UsersConnection"] = ResolversParentTypes["UsersConnection"]
> = {
  nextCursor?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  previousCursor?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  nodes?: Resolver<Array<ResolversTypes["User"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  Query?: QueryResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Node?: NodeResolvers<ContextType>;
  Edge?: EdgeResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
  UserList?: UserListResolvers<ContextType>;
  UsersConnection?: UsersConnectionResolvers<ContextType>;
};

/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export type IResolvers<ContextType = any> = Resolvers<ContextType>;
