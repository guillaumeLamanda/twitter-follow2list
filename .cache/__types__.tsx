/* db87e7ca086721283193e8d72a09a08c23825417
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo } from 'graphql';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: 'Query';
  hello: Scalars['String'];
  friends: UsersConnection;
  lists: Array<UserList>;
  list: UserList;
};


export type QueryFriendsArgs = {
  pagination?: Maybe<Pagination>;
};


export type QueryListsArgs = {
  ownership?: Maybe<ListOwnership>;
};


export type QueryListArgs = {
  id: Scalars['ID'];
  slug: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  createList: UserList;
  updateList: UserList;
  addFriendsToList: UserList;
  unfollow: Array<User>;
};


export type MutationCreateListArgs = {
  input: CreateListInput;
};


export type MutationUpdateListArgs = {
  input: UpdateListInput;
};


export type MutationAddFriendsToListArgs = {
  input: FriendsToListInput;
};


export type MutationUnfollowArgs = {
  ids: Array<Scalars['ID']>;
};

export type FriendsToListInput = {
  friendsIds: Array<Scalars['ID']>;
  listId: Scalars['ID'];
  unfollow?: Maybe<Scalars['Boolean']>;
};

export enum ListMode {
  Public = 'public',
  Private = 'private'
}

export type CreateListInput = {
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  mode: ListMode;
};

export type UpdateListInput = {
  id: Scalars['ID'];
  slug: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  mode: ListMode;
};

export enum ListOwnership {
  Owned = 'OWNED',
  All = 'ALL'
}

export type Pagination = {
  first?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['ID']>;
};

export type Node = {
  id: Scalars['ID'];
};

export type Edge = {
  node: Node;
  cursor: Scalars['ID'];
};

export type User = Node & {
  __typename?: 'User';
  id: Scalars['ID'];
  name: Scalars['String'];
  imageSrc: Scalars['String'];
  screenName: Scalars['String'];
};

export type UserList = Node & {
  __typename?: 'UserList';
  id: Scalars['ID'];
  name: Scalars['String'];
  uri: Scalars['String'];
  description: Scalars['String'];
  slug: Scalars['String'];
  fullName: Scalars['String'];
  user: User;
  mode: ListMode;
};

export type UsersConnection = {
  __typename?: 'UsersConnection';
  nextCursor: Scalars['ID'];
  previousCursor: Scalars['ID'];
  nodes: Array<User>;
};



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Query: ResolverTypeWrapper<{}>;
  String: ResolverTypeWrapper<Scalars['String']>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  Mutation: ResolverTypeWrapper<{}>;
  FriendsToListInput: FriendsToListInput;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  ListMode: ListMode;
  CreateListInput: CreateListInput;
  UpdateListInput: UpdateListInput;
  ListOwnership: ListOwnership;
  Pagination: Pagination;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  Node: ResolversTypes['User'] | ResolversTypes['UserList'];
  Edge: never;
  User: ResolverTypeWrapper<User>;
  UserList: ResolverTypeWrapper<UserList>;
  UsersConnection: ResolverTypeWrapper<UsersConnection>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Query: {};
  String: Scalars['String'];
  ID: Scalars['ID'];
  Mutation: {};
  FriendsToListInput: FriendsToListInput;
  Boolean: Scalars['Boolean'];
  CreateListInput: CreateListInput;
  UpdateListInput: UpdateListInput;
  Pagination: Pagination;
  Int: Scalars['Int'];
  Node: ResolversParentTypes['User'] | ResolversParentTypes['UserList'];
  Edge: never;
  User: User;
  UserList: UserList;
  UsersConnection: UsersConnection;
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  hello?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  friends?: Resolver<ResolversTypes['UsersConnection'], ParentType, ContextType, RequireFields<QueryFriendsArgs, never>>;
  lists?: Resolver<Array<ResolversTypes['UserList']>, ParentType, ContextType, RequireFields<QueryListsArgs, never>>;
  list?: Resolver<ResolversTypes['UserList'], ParentType, ContextType, RequireFields<QueryListArgs, 'id' | 'slug'>>;
};

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  createList?: Resolver<ResolversTypes['UserList'], ParentType, ContextType, RequireFields<MutationCreateListArgs, 'input'>>;
  updateList?: Resolver<ResolversTypes['UserList'], ParentType, ContextType, RequireFields<MutationUpdateListArgs, 'input'>>;
  addFriendsToList?: Resolver<ResolversTypes['UserList'], ParentType, ContextType, RequireFields<MutationAddFriendsToListArgs, 'input'>>;
  unfollow?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType, RequireFields<MutationUnfollowArgs, 'ids'>>;
};

export type NodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Node'] = ResolversParentTypes['Node']> = {
  __resolveType: TypeResolveFn<'User' | 'UserList', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
};

export type EdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Edge'] = ResolversParentTypes['Edge']> = {
  __resolveType: TypeResolveFn<null, ParentType, ContextType>;
  node?: Resolver<ResolversTypes['Node'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
};

export type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  imageSrc?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  screenName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserListResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserList'] = ResolversParentTypes['UserList']> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  uri?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fullName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  user?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  mode?: Resolver<ResolversTypes['ListMode'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UsersConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['UsersConnection'] = ResolversParentTypes['UsersConnection']> = {
  nextCursor?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  previousCursor?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  nodes?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  Query?: QueryResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Node?: NodeResolvers<ContextType>;
  Edge?: EdgeResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
  UserList?: UserListResolvers<ContextType>;
  UsersConnection?: UsersConnectionResolvers<ContextType>;
};


/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export type IResolvers<ContextType = any> = Resolvers<ContextType>;
