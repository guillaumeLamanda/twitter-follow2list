type Query {
  hello: String!
  friends(pagination: Pagination): UsersConnection!
  lists(ownership: ListOwnership): [UserList!]!
  list(id: ID!, slug: String!): UserList!
}

type Mutation {
  createList(input: CreateListInput!): UserList!
  updateList(input: UpdateListInput!): UserList!
  addFriendsToList(input: FriendsToListInput!): UserList!
}

input FriendsToListInput {
  friendsIds: [ID!]!
  listId: ID!
  unfollow: Boolean
}

input CreateListInput {
  title: String
  description: String
}

input UpdateListInput {
  id: ID!
  slug: String!
  title: String
  description: String
}

enum ListOwnership {
  OWNED
  ALL
}

input Pagination {
  first: Int
  after: ID
}

interface Node {
  id: ID!
}

interface Edge {
  node: Node!
  cursor: ID!
}

type User implements Node {
  id: ID!
  name: String!
  imageSrc: String!
  screenName: String!
}

type UserList implements Node {
  id: ID!
  name: String!
  uri: String!
  description: String!
  slug: String!
  fullName: String!
  user: User!
}

type UsersConnection {
  nextCursor: ID!
  previousCursor: ID!
  nodes: [User!]!
}
